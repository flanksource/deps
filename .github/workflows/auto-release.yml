name: Auto Release

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  auto-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25.1'
        cache: true

    - name: Install svu (Semantic Version Util)
      run: |
        curl -sL https://github.com/caarlos0/svu/releases/download/v1.12.0/svu_1.12.0_linux_amd64.tar.gz | tar -xz
        sudo mv svu /usr/local/bin/

    - name: Get current version
      id: current_version
      run: |
        if git describe --tags --abbrev=0 2>/dev/null; then
          CURRENT_VERSION=$(git describe --tags --abbrev=0)
        else
          CURRENT_VERSION="v0.0.0"
        fi
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

    - name: Get next version
      id: next_version
      run: |
        # Check commit messages since last tag for conventional commit types
        LAST_TAG="${{ steps.current_version.outputs.version }}"

        # If no tags exist, start with v0.1.0
        if [ "$LAST_TAG" == "v0.0.0" ]; then
          NEXT_VERSION="v0.1.0"
        else
          # Use svu to calculate next version based on conventional commits
          NEXT_VERSION=$(svu next --tag-mode)
        fi

        echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
        echo "Next version will be: $NEXT_VERSION"

    - name: Check if version needs to be bumped
      id: version_check
      run: |
        CURRENT="${{ steps.current_version.outputs.version }}"
        NEXT="${{ steps.next_version.outputs.version }}"

        if [ "$CURRENT" != "$NEXT" ]; then
          echo "needs_release=true" >> $GITHUB_OUTPUT
          echo "Version will be bumped from $CURRENT to $NEXT"
        else
          echo "needs_release=false" >> $GITHUB_OUTPUT
          echo "No version bump needed"
        fi

    - name: Create and push tag
      if: steps.version_check.outputs.needs_release == 'true'
      run: |
        NEW_VERSION="${{ steps.next_version.outputs.version }}"

        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        # Create and push tag
        git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
        git push origin "$NEW_VERSION"

        echo "Created and pushed tag: $NEW_VERSION"